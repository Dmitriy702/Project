import Service.Menu;


/*
    - Пакеты должны называться с маленькой буквы.
      Плюс, в src должны лежать пакеты, которые будут начинаться с какого-нить мыла написанного задом наперед.
      Т.к. ты не являешься организацией, то можно указать например твой или любой другой вида com.gmail.pazuzu
      и там уже внутри будет creator, data и прочие.

    - Все объекты, которые создают сами внутри себя объекты других классов они должны получать через конструктор или вызываемый у них метод,
      а не создавать сами.

    - Я в проект закинул Default.xml и img.png. Импортируй Default.xml как показано в img.png и перед тем как пушить нажимай кнопку,
      которая настроена у тебя как показано в img_1.png. Если не настроена настрой. А то сейчас больно смотреть на твой код даже по костайлу.
      Есть код стайл и его надо придерживаться. Ты не можешь писать код абы его писать, нужно следить за отступами, пробелами, количеством пустых строк между
      методами и переменными и прочим. Если не будешь за этим следить, то с тобой не будут дружить другие программисты, но будут показывать на тебя пальцами
      и будут обзывать.

    - По сути, к классам AddPerson и Delete можно добавить класс для редактирования инфы чела и объеденить их одним интерфейсом.
      И каждый из этих классов будет по своему реализовывать метод работы с челом.

    - Усе свои реджексы перенеси в енум, а то глаза слезяться от них

    - Методы, которые вызываются у тебя из другого метода должны быть под метод из которого они вызываются.
      например в классе AddressCreator, метод createAddress() должен быть под createAddresses() и методы country(), city(), street(), house(), apartment() под createAddress().
      Аналогичная ситуция и в др классах.

    - Мне это кажется или ты в классе PersonCreator создал объект PersonCreator, чтобы вызывать на нем методы PersonCreator?
      Ты б хоть немного сам вычитывал что делать, а то ж жэсть какая-то.
      И вообще, в PersonCreator должен быть +- 1 метод - createPerson.
      Как собстна в AddressCreator и в ContactCreator не должно быть ничего кроме createAddress и createContact
      Методов name(), surname(), sex() и прочих не должно быть в PersonCreator,
      потому что все что они делают, это возвращают данные для создания чела, но не создают его.
      Как мантур повторяй себе S - single responsibility.

      Получение данных для создания объекта вынести в отдельные классы, которые только и будут что делать так это возвращать данные для создания нужные объектов.
      Возможно, их все можно объединить общим интерфейсом или базовым классом, в котором будет находится общая логика для них.

    - Во многих местах ты делаешь переменные класса, которые используются только в одном методе.
      Так вопрос, зачем объекты нужны эти переменные, если их можно делать переменными метода

      ctrl + alt + l форматирование
      ctrl + alt + o  подчистит импорты

      ctrl + i - реализовать методы интерфейса или абстрактные класса
      ctrl + o оверайд методов

      ctrl + w закрыть вкладку
      ctrl + shift + t - вернуть обратно

      ctrl + d - копировать строку
      ctrl + n - поиск класса

 */
public class Starter
{
    public static void main(String[] args)
    {
        /*
            Метод и класс не должны называться одинаково.
            По версии одного из умных опп дядек класс должен отвечать на вопрос чем он является,
            а метод должен быть существительным, если он что-то возвращает, глаголом - если void.
         */
        new Menu().menu();
    }


    /*
        Удаляй за собой всякое такое
     */
    // Добавил комент чисто проверить.

}
